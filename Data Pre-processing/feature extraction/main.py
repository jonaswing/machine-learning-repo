# instance:  The sentence for which the unique n-grams should be counted.
# n_gram_length:  The length of the n-grams to search for
def generate_ngrams(instance, n_gram_length):
    # Converts words to lowercase to limit the number of n-grams
    words = instance.lower()
    # Uses the string split function to split the sentence into separate words, using the spaces between words.
    words = words.split(" ")
    # Declares a set to store the n-grams. n-grams only allow unique elements, so no duplicate n-grams will be added.
    n_grams = set()
    # Process all the words in the string but stop short of the length of the n-gram length to ensure the
    # final n-gram can be added.
    for i in range(0, len(words) + 1 - n_gram_length):
        # Create an empty string as the starting point for the n-gram.
        n_gram = ""
        # For each word select the current word and the next few, as required by the n-gram length
        for j in range (i, i + n_gram_length):
            # Add the current word to the n-gram, along with a space
            n_gram += words[j] + " "
        # Remove extra spaces around the n-gram
        n_gram = n_gram.strip()
        # Add the n-gram to the set
        n_grams.add(n_gram)

    return n_grams


def generate_data():
    # The following is a sequence of sentences generated by an on-line random word generator.
    # https://randomwordgenerator.com/sentence.php
    # Creates a data set in which each instance is a sentence.
    input_values = list()
    input_values.append(["Flesh-colored yoga pants were far worse than even he feared."])
    input_values.append(["I come from a tribe of head-hunters, so I will never need a shrink."])
    input_values.append(["The doll spun around in circles in hopes of coming alive."])
    input_values.append(["He dreamed of leaving his law firm to open a portable dog wash."])
    input_values.append(["Improve your goldfish's physical fitness by getting him a bicycle."])
    input_values.append(["I purchased a baby clown from the Russian terrorist black market."])
    input_values.append(["The thunderous roar of the jet overhead confirmed her worst fears."])
    input_values.append(["We have a lot of rain in June."])
    input_values.append(["There are few things better in life than a slice of pie."])
    input_values.append(["The opportunity of a lifetime passed before him as he tried to decide between a cone or a cup."])
    return input_values


# Call the generate_data() function to generate the data set.
data = generate_data()
# A header for the input values
print("{0}Input data{1}".format("-" * 20, "-" * 20))
# Call the generate_output function to output the data set to the console window.
generate_output(data)

# A header for the n-grams generated
print("\n{0}N-grams{1}".format("-" * 20, "-" * 20))
# Process every attribute in turn
for i in range(0, len(data)):
    # Calculates a new feature by calculating the unique number of bigrams in an input sentence.
    # This example generates n-grams at a word level from sentences, e.g. 2 words separated by a space form a bigram.
    n_grams = generate_ngrams(data[i][0], 2)
    # Outputs the n-grams generated from the sentence as a sorted list
    print(sorted(n_grams))
    # Uses the len function to determine the number of n-grams generated from the sentence
    # and add them to the end of the current instance as a new feature.
    data[i].append(len(n_grams))

# A header for the output values
print("\n{0}Output data{1}".format("-" * 20, "-" * 20))
# Call the generate_output function to output the data set to the console window.
generate_output(data)